in_source: |-
  (defun prob (count result)
     (if (< count 1000)
         (if (= (% count 3) 0)
             (prob (+ count 1) (+ result count))
             (if (= (% count 5) 0)
                 (prob (+ count 1) (+ result count))
                 (prob (+ count 1) result)))
         result))

  (printnumber (prob 1 0))
in_stdin: |
out_stdout: |
  LoC: 9
  Instructions: 304
  ============================================================
  35153 instructions executed
  Final output stream: ['2', '3', '3', '1', '6', '8']
out_code: |-
  CODE:
  0000: 000101000000 LD 1               ; (printnumber (prob 1 0))
  0001: 0e0000000000 PUSH               ; (printnumber (prob 1 0))
  0002: 000100000000 LD 0               ; (printnumber (prob 1 0))
  0003: 0e0000000000 PUSH               ; (printnumber (prob 1 0))
  0004: 10020e000000 CALL 14            ; (printnumber (prob 1 0))
  0005: 0f0000000000 POP                ; (printnumber (prob 1 0))
  0006: 0f0000000000 POP                ; (printnumber (prob 1 0))
  0007: 0e0000000000 PUSH               ; (printnumber (prob 1 0))
  0008: 000300000000 LD [SP + 0]        ; (printnumber (prob 1 0))
  0009: 0e0000000000 PUSH               ; (printnumber (prob 1 0))
  0010: 1002d9000000 CALL 217           ; (printnumber (prob 1 0))
  0011: 0f0000000000 POP                ; (printnumber (prob 1 0))
  0012: 0f0000000000 POP                ; 
  0013: 120000000000 HLT                ; 
  0014: 000302000000 LD [SP + 2]        ;    (if (< count 1000)
  0015: 0301e8030000 SUB 1000           ;    (if (< count 1000)
  0016: 0b0213000000 JL 19              ;    (if (< count 1000)
  0017: 000100000000 LD 0               ;    (if (< count 1000)
  0018: 070214000000 JMP 20             ;    (if (< count 1000)
  0019: 000101000000 LD 1               ;    (if (< count 1000)
  0020: 030100000000 SUB 0              ;    (if (< count 1000)
  0021: 080259000000 JE 89              ;    (if (< count 1000)
  0022: 000302000000 LD [SP + 2]        ;        (if (= (% count 3) 0)
  0023: 060103000000 REM 3              ;        (if (= (% count 3) 0)
  0024: 0e0000000000 PUSH               ;        (if (= (% count 3) 0)
  0025: 000300000000 LD [SP + 0]        ;        (if (= (% count 3) 0)
  0026: 030100000000 SUB 0              ;        (if (= (% count 3) 0)
  0027: 08021e000000 JE 30              ;        (if (= (% count 3) 0)
  0028: 000100000000 LD 0               ;        (if (= (% count 3) 0)
  0029: 07021f000000 JMP 31             ;        (if (= (% count 3) 0)
  0030: 000101000000 LD 1               ;        (if (= (% count 3) 0)
  0031: 0f0000000000 POP                ;        (if (= (% count 3) 0)
  0032: 030100000000 SUB 0              ;        (if (= (% count 3) 0)
  0033: 080232000000 JE 50              ;        (if (= (% count 3) 0)
  0034: 000302000000 LD [SP + 2]        ;            (prob (+ count 1) (+ result count))
  0035: 020101000000 ADD 1              ;            (prob (+ count 1) (+ result count))
  0036: 0e0000000000 PUSH               ;            (prob (+ count 1) (+ result count))
  0037: 000302000000 LD [SP + 2]        ;            (prob (+ count 1) (+ result count))
  0038: 020303000000 ADD [SP + 3]       ;            (prob (+ count 1) (+ result count))
  0039: 0e0000000000 PUSH               ;            (prob (+ count 1) (+ result count))
  0040: 000301000000 LD [SP + 1]        ;            (prob (+ count 1) (+ result count))
  0041: 010304000000 ST [SP + 4]        ;            (prob (+ count 1) (+ result count))
  0042: 000300000000 LD [SP + 0]        ;            (prob (+ count 1) (+ result count))
  0043: 010303000000 ST [SP + 3]        ;            (prob (+ count 1) (+ result count))
  0044: 0f0000000000 POP                ;            (prob (+ count 1) (+ result count))
  0045: 0f0000000000 POP                ;            (prob (+ count 1) (+ result count))
  0046: 07020e000000 JMP 14             ;            (prob (+ count 1) (+ result count))
  0047: 0f0000000000 POP                ;        (if (= (% count 3) 0)
  0048: 0f0000000000 POP                ;        (if (= (% count 3) 0)
  0049: 070258000000 JMP 88             ;        (if (= (% count 3) 0)
  0050: 000302000000 LD [SP + 2]        ;            (if (= (% count 5) 0)
  0051: 060105000000 REM 5              ;            (if (= (% count 5) 0)
  0052: 0e0000000000 PUSH               ;            (if (= (% count 5) 0)
  0053: 000300000000 LD [SP + 0]        ;            (if (= (% count 5) 0)
  0054: 030100000000 SUB 0              ;            (if (= (% count 5) 0)
  0055: 08023a000000 JE 58              ;            (if (= (% count 5) 0)
  0056: 000100000000 LD 0               ;            (if (= (% count 5) 0)
  0057: 07023b000000 JMP 59             ;            (if (= (% count 5) 0)
  0058: 000101000000 LD 1               ;            (if (= (% count 5) 0)
  0059: 0f0000000000 POP                ;            (if (= (% count 5) 0)
  0060: 030100000000 SUB 0              ;            (if (= (% count 5) 0)
  0061: 08024e000000 JE 78              ;            (if (= (% count 5) 0)
  0062: 000302000000 LD [SP + 2]        ;                (prob (+ count 1) (+ result count))
  0063: 020101000000 ADD 1              ;                (prob (+ count 1) (+ result count))
  0064: 0e0000000000 PUSH               ;                (prob (+ count 1) (+ result count))
  0065: 000302000000 LD [SP + 2]        ;                (prob (+ count 1) (+ result count))
  0066: 020303000000 ADD [SP + 3]       ;                (prob (+ count 1) (+ result count))
  0067: 0e0000000000 PUSH               ;                (prob (+ count 1) (+ result count))
  0068: 000301000000 LD [SP + 1]        ;                (prob (+ count 1) (+ result count))
  0069: 010304000000 ST [SP + 4]        ;                (prob (+ count 1) (+ result count))
  0070: 000300000000 LD [SP + 0]        ;                (prob (+ count 1) (+ result count))
  0071: 010303000000 ST [SP + 3]        ;                (prob (+ count 1) (+ result count))
  0072: 0f0000000000 POP                ;                (prob (+ count 1) (+ result count))
  0073: 0f0000000000 POP                ;                (prob (+ count 1) (+ result count))
  0074: 07020e000000 JMP 14             ;                (prob (+ count 1) (+ result count))
  0075: 0f0000000000 POP                ;            (if (= (% count 5) 0)
  0076: 0f0000000000 POP                ;            (if (= (% count 5) 0)
  0077: 070258000000 JMP 88             ;            (if (= (% count 5) 0)
  0078: 000302000000 LD [SP + 2]        ;                (prob (+ count 1) result)))
  0079: 020101000000 ADD 1              ;                (prob (+ count 1) result)))
  0080: 0e0000000000 PUSH               ;                (prob (+ count 1) result)))
  0081: 000300000000 LD [SP + 0]        ;                (prob (+ count 1) result)))
  0082: 010303000000 ST [SP + 3]        ;                (prob (+ count 1) result)))
  0083: 000302000000 LD [SP + 2]        ;                (prob (+ count 1) result)))
  0084: 010302000000 ST [SP + 2]        ;                (prob (+ count 1) result)))
  0085: 0f0000000000 POP                ;                (prob (+ count 1) result)))
  0086: 07020e000000 JMP 14             ;                (prob (+ count 1) result)))
  0087: 0f0000000000 POP                ;            (if (= (% count 5) 0)
  0088: 07025a000000 JMP 90             ;    (if (< count 1000)
  0089: 000301000000 LD [SP + 1]        ;        result))
  0090: 110000000000 RET                ; 
  0091: 000200000000 LD [0]             ;     (define c (readchar))
  0092: 0e0000000000 PUSH               ;     (define c (readchar))
  0093: 000303000000 LD [SP + 3]        ;     (setchar s i c)
  0094: 020302000000 ADD [SP + 2]       ;     (setchar s i c)
  0095: 0e0000000000 PUSH               ;     (setchar s i c)
  0096: 000301000000 LD [SP + 1]        ;     (setchar s i c)
  0097: 010400000000 ST [[SP + 0]]      ;     (setchar s i c)
  0098: 000301000000 LD [SP + 1]        ;     (if (= c 0)
  0099: 030100000000 SUB 0              ;     (if (= c 0)
  0100: 080267000000 JE 103             ;     (if (= c 0)
  0101: 000100000000 LD 0               ;     (if (= c 0)
  0102: 070268000000 JMP 104            ;     (if (= c 0)
  0103: 000101000000 LD 1               ;     (if (= c 0)
  0104: 030100000000 SUB 0              ;     (if (= c 0)
  0105: 08026c000000 JE 108             ;     (if (= c 0)
  0106: 000304000000 LD [SP + 4]        ;         s
  0107: 070278000000 JMP 120            ;     (if (= c 0)
  0108: 000303000000 LD [SP + 3]        ;         (doreadstring s (+ i 1)))))
  0109: 020101000000 ADD 1              ;         (doreadstring s (+ i 1)))))
  0110: 0e0000000000 PUSH               ;         (doreadstring s (+ i 1)))))
  0111: 000305000000 LD [SP + 5]        ;         (doreadstring s (+ i 1)))))
  0112: 010305000000 ST [SP + 5]        ;         (doreadstring s (+ i 1)))))
  0113: 000300000000 LD [SP + 0]        ;         (doreadstring s (+ i 1)))))
  0114: 010304000000 ST [SP + 4]        ;         (doreadstring s (+ i 1)))))
  0115: 0f0000000000 POP                ;         (doreadstring s (+ i 1)))))
  0116: 0f0000000000 POP                ;         (doreadstring s (+ i 1)))))
  0117: 0f0000000000 POP                ;         (doreadstring s (+ i 1)))))
  0118: 07025b000000 JMP 91             ;         (doreadstring s (+ i 1)))))
  0119: 0f0000000000 POP                ;     (if (= c 0)
  0120: 0f0000000000 POP                ; 
  0121: 0f0000000000 POP                ; 
  0122: 110000000000 RET                ; 
  0123: 000301000000 LD [SP + 1]        ;     (doreadstring s 0))
  0124: 0e0000000000 PUSH               ;     (doreadstring s 0))
  0125: 000100000000 LD 0               ;     (doreadstring s 0))
  0126: 0e0000000000 PUSH               ;     (doreadstring s 0))
  0127: 10025b000000 CALL 91            ;     (doreadstring s 0))
  0128: 0f0000000000 POP                ;     (doreadstring s 0))
  0129: 0f0000000000 POP                ;     (doreadstring s 0))
  0130: 110000000000 RET                ; 
  0131: 000302000000 LD [SP + 2]        ;     (define c (getchar s i))
  0132: 020301000000 ADD [SP + 1]       ;     (define c (getchar s i))
  0133: 0e0000000000 PUSH               ;     (define c (getchar s i))
  0134: 000400000000 LD [[SP + 0]]      ;     (define c (getchar s i))
  0135: 0e0000000000 PUSH               ;     (define c (getchar s i))
  0136: 000300000000 LD [SP + 0]        ;     (if (= c 0)
  0137: 030100000000 SUB 0              ;     (if (= c 0)
  0138: 08028d000000 JE 141             ;     (if (= c 0)
  0139: 000100000000 LD 0               ;     (if (= c 0)
  0140: 07028e000000 JMP 142            ;     (if (= c 0)
  0141: 000101000000 LD 1               ;     (if (= c 0)
  0142: 030100000000 SUB 0              ;     (if (= c 0)
  0143: 080292000000 JE 146             ;     (if (= c 0)
  0144: 000303000000 LD [SP + 3]        ;         i
  0145: 0702a0000000 JMP 160            ;     (if (= c 0)
  0146: 000300000000 LD [SP + 0]        ;         (do (printchar c)
  0147: 010201000000 ST [1]             ;         (do (printchar c)
  0148: 000303000000 LD [SP + 3]        ;             (doprintstring s (+ i 1))))))
  0149: 020101000000 ADD 1              ;             (doprintstring s (+ i 1))))))
  0150: 0e0000000000 PUSH               ;             (doprintstring s (+ i 1))))))
  0151: 000305000000 LD [SP + 5]        ;             (doprintstring s (+ i 1))))))
  0152: 010305000000 ST [SP + 5]        ;             (doprintstring s (+ i 1))))))
  0153: 000300000000 LD [SP + 0]        ;             (doprintstring s (+ i 1))))))
  0154: 010304000000 ST [SP + 4]        ;             (doprintstring s (+ i 1))))))
  0155: 0f0000000000 POP                ;             (doprintstring s (+ i 1))))))
  0156: 0f0000000000 POP                ;             (doprintstring s (+ i 1))))))
  0157: 0f0000000000 POP                ;             (doprintstring s (+ i 1))))))
  0158: 070283000000 JMP 131            ;             (doprintstring s (+ i 1))))))
  0159: 0f0000000000 POP                ;     (if (= c 0)
  0160: 0f0000000000 POP                ; 
  0161: 0f0000000000 POP                ; 
  0162: 110000000000 RET                ; 
  0163: 000301000000 LD [SP + 1]        ; (defun printstring (s) (doprintstring s 0))
  0164: 0e0000000000 PUSH               ; (defun printstring (s) (doprintstring s 0))
  0165: 000100000000 LD 0               ; (defun printstring (s) (doprintstring s 0))
  0166: 0e0000000000 PUSH               ; (defun printstring (s) (doprintstring s 0))
  0167: 100283000000 CALL 131           ; (defun printstring (s) (doprintstring s 0))
  0168: 0f0000000000 POP                ; (defun printstring (s) (doprintstring s 0))
  0169: 0f0000000000 POP                ; (defun printstring (s) (doprintstring s 0))
  0170: 110000000000 RET                ; 
  0171: 000303000000 LD [SP + 3]        ;     (if (!= num 0)
  0172: 030100000000 SUB 0              ;     (if (!= num 0)
  0173: 0d02b0000000 JNE 176            ;     (if (!= num 0)
  0174: 000100000000 LD 0               ;     (if (!= num 0)
  0175: 0702b1000000 JMP 177            ;     (if (!= num 0)
  0176: 000101000000 LD 1               ;     (if (!= num 0)
  0177: 030100000000 SUB 0              ;     (if (!= num 0)
  0178: 0802d6000000 JE 214             ;     (if (!= num 0)
  0179: 000303000000 LD [SP + 3]        ;         (do (define digit (% num 10))
  0180: 06010a000000 REM 10             ;         (do (define digit (% num 10))
  0181: 0e0000000000 PUSH               ;         (do (define digit (% num 10))
  0182: 000303000000 LD [SP + 3]        ;             (setchar buf i (+ digit 48))
  0183: 020302000000 ADD [SP + 2]       ;             (setchar buf i (+ digit 48))
  0184: 0e0000000000 PUSH               ;             (setchar buf i (+ digit 48))
  0185: 000301000000 LD [SP + 1]        ;             (setchar buf i (+ digit 48))
  0186: 020130000000 ADD 48             ;             (setchar buf i (+ digit 48))
  0187: 0e0000000000 PUSH               ;             (setchar buf i (+ digit 48))
  0188: 000300000000 LD [SP + 0]        ;             (setchar buf i (+ digit 48))
  0189: 010401000000 ST [[SP + 1]]      ;             (setchar buf i (+ digit 48))
  0190: 000306000000 LD [SP + 6]        ;             (writedigits (/ num 10) buf (- i 1)))
  0191: 05010a000000 DIV 10             ;             (writedigits (/ num 10) buf (- i 1)))
  0192: 0e0000000000 PUSH               ;             (writedigits (/ num 10) buf (- i 1)))
  0193: 000305000000 LD [SP + 5]        ;             (writedigits (/ num 10) buf (- i 1)))
  0194: 030101000000 SUB 1              ;             (writedigits (/ num 10) buf (- i 1)))
  0195: 0e0000000000 PUSH               ;             (writedigits (/ num 10) buf (- i 1)))
  0196: 000301000000 LD [SP + 1]        ;             (writedigits (/ num 10) buf (- i 1)))
  0197: 010308000000 ST [SP + 8]        ;             (writedigits (/ num 10) buf (- i 1)))
  0198: 000307000000 LD [SP + 7]        ;             (writedigits (/ num 10) buf (- i 1)))
  0199: 010307000000 ST [SP + 7]        ;             (writedigits (/ num 10) buf (- i 1)))
  0200: 000300000000 LD [SP + 0]        ;             (writedigits (/ num 10) buf (- i 1)))
  0201: 010306000000 ST [SP + 6]        ;             (writedigits (/ num 10) buf (- i 1)))
  0202: 0f0000000000 POP                ;             (writedigits (/ num 10) buf (- i 1)))
  0203: 0f0000000000 POP                ;             (writedigits (/ num 10) buf (- i 1)))
  0204: 0f0000000000 POP                ;             (writedigits (/ num 10) buf (- i 1)))
  0205: 0f0000000000 POP                ;             (writedigits (/ num 10) buf (- i 1)))
  0206: 0f0000000000 POP                ;             (writedigits (/ num 10) buf (- i 1)))
  0207: 0702ab000000 JMP 171            ;             (writedigits (/ num 10) buf (- i 1)))
  0208: 0f0000000000 POP                ;     (if (!= num 0)
  0209: 0f0000000000 POP                ;     (if (!= num 0)
  0210: 0f0000000000 POP                ;     (if (!= num 0)
  0211: 0f0000000000 POP                ;     (if (!= num 0)
  0212: 0f0000000000 POP                ;     (if (!= num 0)
  0213: 0702d8000000 JMP 216            ;     (if (!= num 0)
  0214: 000301000000 LD [SP + 1]        ;         (+ i 1)))
  0215: 020101000000 ADD 1              ;         (+ i 1)))
  0216: 110000000000 RET                ; 
  0217: 000301000000 LD [SP + 1]        ;     (if (= num 0)
  0218: 030100000000 SUB 0              ;     (if (= num 0)
  0219: 0802de000000 JE 222             ;     (if (= num 0)
  0220: 000100000000 LD 0               ;     (if (= num 0)
  0221: 0702df000000 JMP 223            ;     (if (= num 0)
  0222: 000101000000 LD 1               ;     (if (= num 0)
  0223: 030100000000 SUB 0              ;     (if (= num 0)
  0224: 0802e6000000 JE 230             ;     (if (= num 0)
  0225: 000102000000 LD 2               ;         (printstring "0")
  0226: 0e0000000000 PUSH               ;         (printstring "0")
  0227: 1002a3000000 CALL 163           ;         (printstring "0")
  0228: 0f0000000000 POP                ;         (printstring "0")
  0229: 07022f010000 JMP 303            ;     (if (= num 0)
  0230: 000112000000 LD 18              ;            (define buf (makestring 10))
  0231: 0e0000000000 PUSH               ;            (define buf (makestring 10))
  0232: 000302000000 LD [SP + 2]        ;            (if (> num 0)
  0233: 030100000000 SUB 0              ;            (if (> num 0)
  0234: 0902ed000000 JG 237             ;            (if (> num 0)
  0235: 000100000000 LD 0               ;            (if (> num 0)
  0236: 0702ee000000 JMP 238            ;            (if (> num 0)
  0237: 000101000000 LD 1               ;            (if (> num 0)
  0238: 030100000000 SUB 0              ;            (if (> num 0)
  0239: 080205010000 JE 261             ;            (if (> num 0)
  0240: 000302000000 LD [SP + 2]        ;                    (define i (writedigits num buf 9))
  0241: 0e0000000000 PUSH               ;                    (define i (writedigits num buf 9))
  0242: 000301000000 LD [SP + 1]        ;                    (define i (writedigits num buf 9))
  0243: 0e0000000000 PUSH               ;                    (define i (writedigits num buf 9))
  0244: 000109000000 LD 9               ;                    (define i (writedigits num buf 9))
  0245: 0e0000000000 PUSH               ;                    (define i (writedigits num buf 9))
  0246: 1002ab000000 CALL 171           ;                    (define i (writedigits num buf 9))
  0247: 0f0000000000 POP                ;                    (define i (writedigits num buf 9))
  0248: 0f0000000000 POP                ;                    (define i (writedigits num buf 9))
  0249: 0f0000000000 POP                ;                    (define i (writedigits num buf 9))
  0250: 0e0000000000 PUSH               ;                    (define i (writedigits num buf 9))
  0251: 000301000000 LD [SP + 1]        ;                    (printstring (+ buf i)))
  0252: 020300000000 ADD [SP + 0]       ;                    (printstring (+ buf i)))
  0253: 0e0000000000 PUSH               ;                    (printstring (+ buf i)))
  0254: 000300000000 LD [SP + 0]        ;                    (printstring (+ buf i)))
  0255: 0e0000000000 PUSH               ;                    (printstring (+ buf i)))
  0256: 1002a3000000 CALL 163           ;                    (printstring (+ buf i)))
  0257: 0f0000000000 POP                ;                    (printstring (+ buf i)))
  0258: 0f0000000000 POP                ;            (if (> num 0)
  0259: 0f0000000000 POP                ;            (if (> num 0)
  0260: 07022e010000 JMP 302            ;            (if (> num 0)
  0261: 000302000000 LD [SP + 2]        ;                (if (= num -2147483648)
  0262: 030100000080 SUB -2147483648    ;                (if (= num -2147483648)
  0263: 08020a010000 JE 266             ;                (if (= num -2147483648)
  0264: 000100000000 LD 0               ;                (if (= num -2147483648)
  0265: 07020b010000 JMP 267            ;                (if (= num -2147483648)
  0266: 000101000000 LD 1               ;                (if (= num -2147483648)
  0267: 030100000000 SUB 0              ;                (if (= num -2147483648)
  0268: 080212010000 JE 274             ;                (if (= num -2147483648)
  0269: 000104000000 LD 4               ;                    (printstring "-2147483648")
  0270: 0e0000000000 PUSH               ;                    (printstring "-2147483648")
  0271: 1002a3000000 CALL 163           ;                    (printstring "-2147483648")
  0272: 0f0000000000 POP                ;                    (printstring "-2147483648")
  0273: 07022e010000 JMP 302            ;                (if (= num -2147483648)
  0274: 000110000000 LD 16              ;                        (printstring "-")
  0275: 0e0000000000 PUSH               ;                        (printstring "-")
  0276: 1002a3000000 CALL 163           ;                        (printstring "-")
  0277: 0f0000000000 POP                ;                        (printstring "-")
  0278: 000302000000 LD [SP + 2]        ;                        (define i (writedigits (* num -1) buf 9))
  0279: 0401ffffffff MUL -1             ;                        (define i (writedigits (* num -1) buf 9))
  0280: 0e0000000000 PUSH               ;                        (define i (writedigits (* num -1) buf 9))
  0281: 000300000000 LD [SP + 0]        ;                        (define i (writedigits (* num -1) buf 9))
  0282: 0e0000000000 PUSH               ;                        (define i (writedigits (* num -1) buf 9))
  0283: 000302000000 LD [SP + 2]        ;                        (define i (writedigits (* num -1) buf 9))
  0284: 0e0000000000 PUSH               ;                        (define i (writedigits (* num -1) buf 9))
  0285: 000109000000 LD 9               ;                        (define i (writedigits (* num -1) buf 9))
  0286: 0e0000000000 PUSH               ;                        (define i (writedigits (* num -1) buf 9))
  0287: 1002ab000000 CALL 171           ;                        (define i (writedigits (* num -1) buf 9))
  0288: 0f0000000000 POP                ;                        (define i (writedigits (* num -1) buf 9))
  0289: 0f0000000000 POP                ;                        (define i (writedigits (* num -1) buf 9))
  0290: 0f0000000000 POP                ;                        (define i (writedigits (* num -1) buf 9))
  0291: 0e0000000000 PUSH               ;                        (define i (writedigits (* num -1) buf 9))
  0292: 000302000000 LD [SP + 2]        ;                        (printstring (+ buf i))))))))
  0293: 020300000000 ADD [SP + 0]       ;                        (printstring (+ buf i))))))))
  0294: 0e0000000000 PUSH               ;                        (printstring (+ buf i))))))))
  0295: 000300000000 LD [SP + 0]        ;                        (printstring (+ buf i))))))))
  0296: 0e0000000000 PUSH               ;                        (printstring (+ buf i))))))))
  0297: 1002a3000000 CALL 163           ;                        (printstring (+ buf i))))))))
  0298: 0f0000000000 POP                ;                        (printstring (+ buf i))))))))
  0299: 0f0000000000 POP                ;                (if (= num -2147483648)
  0300: 0f0000000000 POP                ;                (if (= num -2147483648)
  0301: 0f0000000000 POP                ;                (if (= num -2147483648)
  0302: 0f0000000000 POP                ;     (if (= num 0)
  0303: 110000000000 RET                ; 
  DATA:
  0000: 00000000
  0001: 00000000
  0002: 00000030
  0003: 00000000
  0004: 0000002d
  0005: 00000032
  0006: 00000031
  0007: 00000034
  0008: 00000037
  0009: 00000034
  0010: 00000038
  0011: 00000033
  0012: 00000036
  0013: 00000034
  0014: 00000038
  0015: 00000000
  0016: 0000002d
  0017: 00000000
  0018: 00000000
  0019: 00000000
  0020: 00000000
  0021: 00000000
  0022: 00000000
  0023: 00000000
  0024: 00000000
  0025: 00000000
  0026: 00000000
  0027: 00000000
  0028: 00000000
in_logging_level: info
in_debug_level: 2
out_log: |
